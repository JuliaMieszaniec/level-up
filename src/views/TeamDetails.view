<template>
  <div class="team-details container py-4">
    <h2 class="neon-text mb-4">Zespół: {{ team.name }}</h2>

    <nav class="mb-4">
      <ul class="nav nav-tabs">
        <li class="nav-item" v-for="tab in tabs" :key="tab" >
          <a
            href="#"
            @click.prevent="activeTab = tab"
            :class="['nav-link', { active: activeTab === tab }]"
          >{{ tab }}</a>
        </li>
      </ul>
    </nav>

    <div v-if="activeTab === 'Kanban'">
      <KanbanBoard 
        :teamId="team.id"
        :kanbanData="kanbanData"
        @update="fetchKanbanData"
      />
    </div>

    <div v-else-if="activeTab === 'Cele i umiejętności'">
      <GoalsSkillsManager
        :teamId="team.id"
        :goals="team.goals"
        :skills="team.skills"
        @update="fetchTeamData"
      />
    </div>

    <div v-else-if="activeTab === 'Podsumowania'">
      <TeamEntries
        :teamId="team.id"
        :entries="team.entries"
        @update="fetchTeamData"
      />
    </div>

    <div v-else-if="activeTab === 'Pliki'">
      <TeamFiles
        :teamId="team.id"
      />
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { doc, getDoc } from 'firebase/firestore'
import { db } from '@/firebase'

import KanbanBoard from '@/components/team/KanbanBoard.vue'
import GoalsSkillsManager from '@/components/team/GoalsSkillsManager.vue'
import TeamEntries from '@/components/team/TeamEntries.vue'
import TeamFiles from '@/components/team/TeamFiles.vue'

const props = defineProps({
  teamId: { type: String, required: true }
})

const team = ref(null)
const activeTab = ref('Kanban')
const tabs = ['Kanban', 'Cele i umiejętności', 'Podsumowania', 'Pliki']

const kanbanData = ref(null)

const fetchTeamData = async () => {
  const teamDoc = await getDoc(doc(db, 'teams', props.teamId))
  if (teamDoc.exists()) {
    team.value = { id: teamDoc.id, ...teamDoc.data() }
  }
}

const fetchKanbanData = async () => {
  // Pobierz osobno tablice kanban, jeśli są w innym miejscu,
  // albo odśwież team.goals / skills itd.
  await fetchTeamData()
  kanbanData.value = team.value?.kanban || []
}

onMounted(async () => {
  await fetchTeamData()
  await fetchKanbanData()
})
</script>

<style scoped>
.team-details {
  color: #eee;
}

.neon-text {
  background: linear-gradient(90deg, #b983ff, #7f5af0);
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
  font-weight: 700;
}

.nav-tabs .nav-link {
  color: #b983ff;
  cursor: pointer;
}
.nav-tabs .nav-link.active {
  color: #fff;
  font-weight: 700;
  border-bottom: 3px solid #b983ff;
}
</style>
